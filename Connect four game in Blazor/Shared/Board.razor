```html
@inject ConnectFour.Shared.GameState State
	<style>
		:root {
			--board-bg: yellow; 	/** the color of the board **/
			--player1: blue;		/** Player 1's piece color **/
			--player2: red;			/** Player 2's piece color **/
		}
	</style>
```
<nav>
	<span title="Click to play a piece" @onclick="() => PlayPiece(0)">ðŸ”½</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(1)">ðŸ”½</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(2)">ðŸ”½</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(3)">ðŸ”½</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(4)">ðŸ”½</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(5)">ðŸ”½</span>
	<span title="Click to play a piece" @onclick="() => PlayPiece(6)">ðŸ”½</span>
</nav>

<article>
	@WinnerMessage  <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
	<br />
	<span class="alert-danger">@ErrorMessage</span>
	<span class="alert-info">@CurrentTurn</span>
</article>

<div>
   <div class="board">
     @for (var i = 0; i < 42; i++)
     {
       <span class="@Pieces[i]"></span>
     }
   </div>
</div>

@code {
    protected override void OnInitialized()
	{
		State.ResetBoard();
	}
    private String[] Pieces = new String[42];

    private string WinnerMessage = string.Empty;

    private string ErrorMessage => State.ErrorMessage;

    private string CurrentTurn => (WinnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";

    private string ResetStyle => (WinnerMessage == string.Empty) ? "display: none;" : "";
    private void PlayPiece(byte col) 
    {
        var landingRow = State.PlayPiece(col);
        var cssClass = $"player{State.PlayerTurn} col{col} drop{landingRow}";
        Pieces[State.CurrentTurn - 1] = cssClass;
    }

    void ResetGame()
    {
        State.ResetBoard();
        WinnerMessage = string.Empty;
        ErrorMessage = string.Empty;
        Pieces = new string[42];
    }
}