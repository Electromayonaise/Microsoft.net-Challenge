/* Cascading Style Sheets (CSS) let you specify how your page should look. 
The basic idea is to define what the style should be for the elements that you use within your HTML pages. 
While the HTML elements define your content, CSS styles define what this content looks like. 

For example, you can apply rounded corners or give a gradient background to an element. 
Or you can use CSS to specify how hyperlinks look and respond when you interact with them. 
You can also perform sophisticated page layouts and animation effects.

One benefit of external CSS is that multiple HTML pages can link to the same CSS file. 
If you make a change to the CSS, your styling will update for each page. 
Using an HTML file for your page content, a CSS file for styling, and a JavaScript 
file for interaction is called separation of concerns.

As described previously, you can also write CSS directly in HTML, which is called internal CSS. 
Even for a basic website, there are so many CSS rules the HTML page can become cluttered quickly. 
With more than one page, the same CSS would often be repeated and challenging to manage.

*/

:root {
    --green: #00FF00;
    --white: #FFFFFF;
    --black: #000000;
  }

/*
The :root selector represents the <html> element in the HTML page. 
For this kind of task, a best practice is to define a set of global 
CSS variables in a CSS rule with the :root selector. In this example, 
you've defined three color variables. 
You'll next be able to use these variables in other CSS rules.
*/

body {
    /*font-family: monospace;*/
    background: var(--bg);
    color: var(--fontColor);
    font-family: helvetica;
    /*In this example, you use the body selector to set the background and color properties and,
    because the elements that are visible on the web page are all inside the <body> element, 
    they'll inherit the colors set on <body>.*/
}

/* You can also remove the ul sector so that it also inherits the same font from the <body> */

/*ul {
    font-family: helvetica;
}*/

/* The above code snippet contains two rules. Each rule has:

A selector. body and ul are the selectors of the two rules and are used to select which element(s) the styles apply to.

An opening curly brace ({).

A list of style declarations that determine what the selected elements should look like.

A closing curly brace (}). 

For example, the ul selector selects the <ul> HTML element in the page, to apply styles to it. 
The declaration is font-family: helvetica and determines what the style should be. 
The property name is font-family, and the value is helvetica.

*/

/* SELECTORS

ID and class selectors enable you to apply styles to custom attribute names in your HTML. 
An ID is used to style one element, whereas classes can be used to style multiple elements.

*/

li {
    list-style: circle;
  }
  
  .list {
    list-style: square;
  }
  
  /* You can remove this msg selector so that they also inherit the same font from <body> */
  /*#msg {
    font-family: monospace;
  }*/

/* The preceding code contains three CSS rules, with the last two rules using custom attributes to select elements: .list and #msg.

.list is a class selector. Each HTML element that contains a class attribute set to list will get the styles that are defined within this selector.

#msg is an ID selector. The HTML element that has its id attribute set to msg will get the styles that are defined within this selector.

The names that you use for your selectors can be arbitrary, as long as they match what you've defined in the HTML.

Open the file again 

Are the font styles what you expected to see? It's interesting how styles applied to the <body> are inherited on the <h1> element. 
We didn't define anything for <h1>, but it still got the font that was defined on <body>. 
This inheritance mechanism from parent elements to their descendants is one of the key aspects of CSS. 
However, the <li> elements have a different font, overriding the one set on <body> because they're also 
descendants of the <ul> element which you defined a style for.

*/

/* ADD A LIGHT THEME 

Next, you'll add support for a color theme for your website. 
Begin by defining a light-colored theme using hex color codes.

In this example, #000000 specifies black for the font color, 
and #00FF00 specifies green for the background color.

In your HTML file, update the <body> element with a class name, light-theme, 
so the class selector for light theme will apply the styles correctly.

*/

.light-theme {
    --bg: var(--green);
    --fontColor: var(--black);
    --btnBg: var(--black);
    --btnFontColor: var(--white);
  }
  .dark-theme {
    --bg: var(--black);
    --fontColor: var(--green);
    --btnBg: var(--white);
    --btnFontColor: var(--black);
  }

/* ADD A DARK THEME

For the dark theme, you'll set up the infrastructure in preparation for the next unit, 
in which you'll enable theme switching on the web page.

In the preceding code, you defined two new variables, bg and fontColor, 
which specify a background and font color. These variables use the var keyword 
to set their property values to the variables previously specified in your :root selector.

*/

.btn {
    position: absolute;
    top: 20px;
    left: 250px;
    height: 50px;
    width: 50px;
    border-radius: 50%;
    border: none;
    color: var(--btnFontColor);
    background-color: var(--btnBg);
  }

  /* add a new rule with a .btn class selector for your HTML button. 
  To make the button colors different from the general light or dark theme colors, 
  set the color and background-color properties in this rule. 
  They'll override the default ones set in the body rule of your CSS file. */